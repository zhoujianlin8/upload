/* 框架初始化 */
!function(win, $) {
var 
  yp = function(conf) {
    return $.extend(true, new yp.fn.create(conf), yp);
  }
  yp.fn = yp.prototype = {
    constructor: yp
  , yp: '0.8.11'
  , create: function(conf) {
      return this;
    }
  }
  yp.fn.create.prototype = yp.fn;
  yp.create = function() {
    this.config.init();
    this.loader.init();
  }

  yp.mix = $.extend;
  yp.mix(yp, {
    rword: /[^, ]+/g
  , global: {}  /*全局变量*/
  , config: {}  /*全局配置*/
  , loger: {}   /*日志输出*/
  , loader: {}  /*资源加载*/
  , modules: {} /*全局模块*/
  , cache: {}   /*全局缓存*/
  , event: {}   /*全局事件*/
  , ui: {}      /*全局UI*/
  , system: {}  /*系统函数*/
  });

  win.yp = yp;
  define( 'yp', [], function() { return yp; } );
}(this, jQuery);

/* 全局事件管理event */
!function($, yp) {
var 
  api = yp.event
, o = $({})
  
  api.sub = function() {
    var eventName = arguments[0]
      , data = o.data(eventName.replace(/\..*/, ''))
    if (data) {
      var callback = arguments[1]
      callback(data);
      return;
    }
    o.on.apply(o, arguments);
  };
  api.unsub = function() {
    o.off.apply(o, arguments);
  };
  api.pub = function() {
    o.trigger.apply(o, arguments);
    var eventName = arguments[0]
    return {
      cache: function(val) {
        eventName = typeof eventName === 'string' ? eventName : eventName.type + '.' + eventName.namespace;///
        o.data(eventName, val || true);///
      }
    }
  };

  // 系统观察者
  $.sub = api.sub;
  $.unsub = api.unsub;
  $.pub = api.pub;

  // 页面观察者
  $.each(['sub', 'unsub', 'pub'], function(i, name) {
    yp[name] = function() {
      if (typeof arguments[0] === 'string') arguments[0] = 'yp/' + arguments[0];
      return $[name].apply(null, arguments);
    };
  });
}(jQuery, yp);

/* 全局配置config */
!function($, yp) {
var
  win = this///
, system = yp.system
, api = yp.config

  // 
  api.data = function(key, val) {
    ///
  }

  api.init = function() {
    // 调试模式控制器
    api.debug = true;
    
    // 文件资源配置
    api.loader = {
      require: {
        paths: {
          'yp.core': '../yp.core'
        , 'slimscroll': 'jquery.slimscroll.min'
        , "draggable": 'jquery-ui-draggable.min'
        , 'jqueryUI': 'jquery-ui-1.10.3.custom.min'
        }
        , shim: {
        }
      }
    , baseUrl: win.STATICS_PATH || '../'
    , baseList: ['yp.core', 'jqueryUI', 'favorite', 'alert']///
    }
    api.loader.baseUrl = {
      base: api.loader.baseUrl
    , js: api.loader.baseUrl + 'j/lib'
    , css: api.loader.baseUrl + 'c/'
    , html: api.loader.baseUrl + 'h/'
    };
    api.loader.require.baseUrl = api.loader.baseUrl.js;
  }

  define( 'yp.config', [], function() { return api; } );
}(jQuery, yp);

/* 全局缓存cache */
!function($, yp) {
var 
  win = this///
, channel = win.top///
, api = yp.cache

  yp.mix(api, {
    /**
     * 跨框架数据共享接口
     * @param   {String}    存储的数据名
     * @param   {Any}       将要存储的任意数据(无此项则返回被查询的数据)
     */
    data: function (name, value) {
      var cache = channel['_CACHE'] || (channel['_CACHE'] = {});
      return value === undefined ? cache[name] : (cache[name] = value, this);
    }
    /**
     * 数据共享删除接口
     * @param   {String}    删除的数据名
     */
  , removeData: function (name) {
      var cache = channel['_CACHE'];
      if (cache && cache[name]) delete cache[name];
      return this;
    }
  });

  define( 'yp.cache', [], function() { return api; } );
}(jQuery, yp);

/* 静态文件加载loader */
!function($, yp) {
var
  win = this///
, config = yp.config
, api = yp.loader

  // 对指定函数进行包裹
, wrap = function(value, wrapper) {
    return function() {
      var args = [value];///
      [].push.apply(args, arguments);
      return wrapper.apply(this, args);
    };
  }
  // 参数数组前插yp
, insertCore = function(func) {
    return wrap(yp, func);///new yp()
  }
  /// 检测文件类型
, getType = function(url) {
    var ext = 'js'
      , tmp = url.replace(/[?#].*/, '')
    if (/\.(\w+)$/.test( tmp )) ext = RegExp.$1;
    return ext;
  }
  /// 加载css文件
, loadCSS = function(url) {
    var DOC = document
      , head = DOC.getElementsByTagName('head')[0]
      , id = url.replace(/[?#].*/, '')
    if (DOC.getElementById(id)) return;
    var node     =  DOC.createElement("link");
    node.rel     = "stylesheet";
    node.href    = url;
    node.id      = id;
    head.insertBefore( node, head.firstChild );
  }
  api.loadCSS = function() {
    arguments[0] = config.loader.baseUrl.css + arguments[0] + '.css';///
    loadCSS.apply(this, arguments);
  };

  // 加载模块
  api.use = function(plugs, callback) {
    if (plugs) {
      if (typeof plugs === 'string') plugs = plugs.match(yp.rword);
      if (callback) {
        callback = wrap(callback, function(func) {
          var args = [].slice.call(arguments, 1)
          $.sub('base-ready', function() {
            insertCore(func).apply(null, args);///
            $.pub('loader-ready-page', plugs);///
          });
        });
      }
      require(plugs, callback);///
    }
  };
  yp.use = api.use;

  // 全局页面初始化完成
  api.ready = (function() {
    var nReadyCount = 1
    $.sub('doc-ready', function() {
      if (--nReadyCount <= 0) {
        api.ready();
      }
    });
    return function(callback) {
      if (callback) {
        callback = wrap(callback, function(func) {
          insertCore(func).apply(this, arguments);
        });
        $.sub('yp/ready', callback);
      } else {
        $.pub('yp/ready').cache();
      }
    }
  }());
  yp.ready = api.ready;

  api.init = function() {
    // 配置参数
    require.config(config.loader.require);
    // 加载核心文件
    require(config.loader.baseList, function() {
      $.pub('base-ready').cache();
    });
    $(document).on('loader-complete', function(e, mod) {
      $.sub('base-ready', function() {
        $.pub('loader-ready', [mod]);
      });
    });
    // 文档加载
    $(function() {
      $.pub('doc-ready').cache();///
    });
  }
}(jQuery, yp);

/// yp框架初始化
yp.create();